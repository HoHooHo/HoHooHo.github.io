{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".katex img { object-fit: fill; padding: unset; display: block; position: absolute; width: 100%; height: inherit; } Welcome to MkDocs # 1. OpenGL 1.1 OpenGL 2. UE4 2.1 UE4 /assets/avatar.png /assets/avatar.png /assets/avatar.png f ( x ) = \u222b \u2212 \u221e \u221e f ^ ( \u03be ) \u2009 e 2 \u03c0 i \u03be x \u2009 d \u03be f(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi)\\,e^{2 \\pi i \\xi x} \\,d\\xi f ( x ) = \u222b \u2212 \u221e \u221e \u200b f ^ \u200b ( \u03be ) e 2 \u03c0i \u03be x d \u03be","title":"Home"},{"location":"#welcome-to-mkdocs","text":"1. OpenGL 1.1 OpenGL 2. UE4 2.1 UE4 /assets/avatar.png /assets/avatar.png /assets/avatar.png f ( x ) = \u222b \u2212 \u221e \u221e f ^ ( \u03be ) \u2009 e 2 \u03c0 i \u03be x \u2009 d \u03be f(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi)\\,e^{2 \\pi i \\xi x} \\,d\\xi f ( x ) = \u222b \u2212 \u221e \u221e \u200b f ^ \u200b ( \u03be ) e 2 \u03c0i \u03be x d \u03be","title":"Welcome to MkDocs"},{"location":"Windows%E9%83%A8%E7%BD%B2mkdocs/","text":"Windows \u90e8\u7f72 mkdocs # \u5b89\u88c5 Python # \u4f7f\u7528 python3.x \u7248\u672c\uff0c\u786e\u4fdd\u52fe\u9009\u4e86 \u5b89\u88c5 pip \u5b89\u88c5 mkdocs # cmd \u6267\u884c\u547d\u4ee4 pip install mkdocs \u5b89\u88c5 mkdocs-bootswatch \u4e3b\u9898 # cmd \u6267\u884c\u547d\u4ee4 pip install mkdocs-bootswatch \u5b89\u88c5 markdown_katex \u6570\u5b66\u51fd\u6570\u6e32\u67d3\u5e93 # cmd \u6267\u884c\u547d\u4ee4 pip install mkdocs \u90e8\u7f72\u5230 Github #","title":"Windows \u90e8\u7f72 mkdocs"},{"location":"Windows%E9%83%A8%E7%BD%B2mkdocs/#windows-mkdocs","text":"","title":"Windows \u90e8\u7f72 mkdocs"},{"location":"Windows%E9%83%A8%E7%BD%B2mkdocs/#python","text":"\u4f7f\u7528 python3.x \u7248\u672c\uff0c\u786e\u4fdd\u52fe\u9009\u4e86 \u5b89\u88c5 pip","title":"\u5b89\u88c5 Python"},{"location":"Windows%E9%83%A8%E7%BD%B2mkdocs/#mkdocs","text":"cmd \u6267\u884c\u547d\u4ee4 pip install mkdocs","title":"\u5b89\u88c5 mkdocs"},{"location":"Windows%E9%83%A8%E7%BD%B2mkdocs/#mkdocs-bootswatch","text":"cmd \u6267\u884c\u547d\u4ee4 pip install mkdocs-bootswatch","title":"\u5b89\u88c5 mkdocs-bootswatch \u4e3b\u9898"},{"location":"Windows%E9%83%A8%E7%BD%B2mkdocs/#markdown_katex","text":"cmd \u6267\u884c\u547d\u4ee4 pip install mkdocs","title":"\u5b89\u88c5 markdown_katex \u6570\u5b66\u51fd\u6570\u6e32\u67d3\u5e93"},{"location":"Windows%E9%83%A8%E7%BD%B2mkdocs/#github","text":"","title":"\u90e8\u7f72\u5230 Github"},{"location":"markdown/","text":".katex img { object-fit: fill; padding: unset; display: block; position: absolute; width: 100%; height: inherit; } Markdown \u6807\u9898 # # \u4e00\u7ea7\u6807\u9898 ## \u4e8c\u7ea7\u6807\u9898 ### \u4e09\u7ea7\u6807\u9898 #### \u56db\u7ea7\u6807\u9898 ##### \u4e94\u7ea7\u6807\u9898 ###### \u516d\u7ea7\u6807\u9898 Markdown \u6bb5\u843d # \u7ea2\u8272\u6587\u5b57 \u7eff\u8272\u6587\u5b57 \u84dd\u8272\u6587\u5b57 \u9ec4\u8272\u6587\u5b57 \u659c\u4f53\u6587\u672c \u659c\u4f53\u6587\u672c \u7c97\u4f53\u6587\u672c \u7c97\u4f53\u6587\u672c \u7c97\u659c\u4f53\u6587\u672c \u7c97\u659c\u4f53\u6587\u672c \u5206\u5272\u7ebf \u6d4b\u8bd5\u6587\u672c ~~\u6d4b\u8bd5\u6587\u672c~~ \u5e26\u4e0b\u5212\u7ebf\u6587\u672c Markdown \u5217\u8868 # \u65e0\u5e8f\u5217\u8868\u4f7f\u7528\u661f\u53f7(*)\u3001\u52a0\u53f7(+)\u6216\u662f\u51cf\u53f7(-)\u4f5c\u4e3a\u5217\u8868\u6807\u8bb0\uff0c\u8fd9\u4e9b\u6807\u8bb0\u540e\u9762\u8981\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u518d\u586b\u5199\u5185\u5bb9\u3002\u6709\u5e8f\u5217\u8868\u4f7f\u7528\u6570\u5b57\u5e76\u52a0\u4e0a . \u53f7\u6765\u8868\u793a \u7b2c\u4e00\u9879 \u7b2c\u4e8c\u9879 \u7b2c\u4e09\u9879 \u7b2c\u4e00\u9879 \u7b2c\u4e8c\u9879 \u7b2c\u4e09\u9879 \u7b2c\u4e00\u9879 \u7b2c\u4e8c\u9879 \u7b2c\u4e09\u9879 \u7b2c\u4e00\u9879 \u7b2c\u4e8c\u9879 \u7b2c\u4e09\u9879 \u5217\u8868\u5d4c\u5957\u53ea\u9700\u5728\u5b50\u5217\u8868\u4e2d\u7684\u9009\u9879\u524d\u9762\u6dfb\u52a0\u56db\u4e2a\u7a7a\u683c\u5373\u53ef\uff1a \u7b2c\u4e00\u9879\uff1a \u7b2c\u4e00\u9879\u5d4c\u5957\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u7b2c\u4e00\u9879\u5d4c\u5957\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u7b2c\u4e8c\u9879\uff1a \u7b2c\u4e8c\u9879\u5d4c\u5957\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u7b2c\u4e8c\u9879\u5d4c\u5957\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20 Markdown \u533a\u5757 # \u533a\u5757\u5f15\u7528 \u83dc\u9e1f\u6559\u7a0b \u5b66\u7684\u4e0d\u4ec5\u662f\u6280\u672f\u66f4\u662f\u68a6\u60f3 \u6700\u5916\u5c42 \u7b2c\u4e00\u5c42\u5d4c\u5957 \u7b2c\u4e8c\u5c42\u5d4c\u5957 Markdown \u4ee3\u7801 # printf() \u51fd\u6570 int a = 0; int a = 0; $(document).ready(function () { alert('RUNOOB'); }); Markdown \u94fe\u63a5 # \u94fe\u63a5\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a [\u94fe\u63a5\u540d\u79f0](\u94fe\u63a5\u5730\u5740) \u6216\u8005 <\u94fe\u63a5\u5730\u5740> Markdown \u56fe\u7247 # Markdown \u8868\u683c # Markdown \u5236\u4f5c\u8868\u683c\u4f7f\u7528 | \u6765\u5206\u9694\u4e0d\u540c\u7684\u5355\u5143\u683c\uff0c\u4f7f\u7528 - \u6765\u5206\u9694\u8868\u5934\u548c\u5176\u4ed6\u884c\u3002 \u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u8868\u683c\u7684\u5bf9\u9f50\u65b9\u5f0f\uff1a -: \u8bbe\u7f6e\u5185\u5bb9\u548c\u6807\u9898\u680f\u5c45\u53f3\u5bf9\u9f50\u3002 :- \u8bbe\u7f6e\u5185\u5bb9\u548c\u6807\u9898\u680f\u5c45\u5de6\u5bf9\u9f50\u3002 :-: \u8bbe\u7f6e\u5185\u5bb9\u548c\u6807\u9898\u680f\u5c45\u4e2d\u5bf9\u9f50\u3002 \u8868\u5934 \u8868\u5934 \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5de6\u5bf9\u9f50 \u53f3\u5bf9\u9f50 \u5c45\u4e2d\u5bf9\u9f50 \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c Markdown \u9ad8\u7ea7\u6280\u5de7 # \u652f\u6301\u7684 HTML \u5143\u7d20\uff0c\u4e0d\u5728 Markdown \u6db5\u76d6\u8303\u56f4\u4e4b\u5185\u7684\u6807\u7b7e\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u5728\u6587\u6863\u91cc\u9762\u7528 HTML \u64b0\u5199\u3002 \u76ee\u524d\u652f\u6301\u7684 HTML \u5143\u7d20\u6709\uff1a<kbd> <b> <i> <em> <sup> <sub> <br>\u7b49 \u4f7f\u7528 Ctrl + Alt + Del \u91cd\u542f\u7535\u8111 \u652f\u6301\u8f6c\u4e49\u5b57\u7b26 \u6587\u672c\u52a0\u7c97 ** \u6b63\u5e38\u663e\u793a\u661f\u53f7 ** Markdown \u652f\u6301\u4ee5\u4e0b\u8fd9\u4e9b\u7b26\u53f7\u524d\u9762\u52a0\u4e0a\u53cd\u659c\u6760\u6765\u5e2e\u52a9\u63d2\u5165\u666e\u901a\u7684\u7b26\u53f7\uff1a \\ \u53cd\u659c\u7ebf ` \u53cd\u5f15\u53f7 * \u661f\u53f7 _ \u4e0b\u5212\u7ebf {} \u82b1\u62ec\u53f7 [] \u65b9\u62ec\u53f7 () \u5c0f\u62ec\u53f7 # \u4e95\u5b57\u53f7 + \u52a0\u53f7 - \u51cf\u53f7 . \u82f1\u6587\u53e5\u70b9 ! \u611f\u53f9\u53f7 Markdown \u6570\u5b66\u516c\u5f0f # \u5d4c\u5165\u4e86Katex\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528\u6570\u5b66\u516c\u5f0f f ( x ) = \u222b \u2212 \u221e \u221e f ^ ( \u03be ) \u2009 e 2 \u03c0 i \u03be x \u2009 d \u03be f(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi)\\,e^{2 \\pi i \\xi x} \\,d\\xi f ( x ) = \u222b \u2212 \u221e \u221e \u200b f ^ \u200b ( \u03be ) e 2 \u03c0i \u03be x d \u03be v \u02c9 = ( x y z ) \\bar{v} = \\begin{pmatrix} \\color{red}x \\\\ \\color{green}y \\\\ \\color{blue}z \\end{pmatrix} v \u02c9 = \u239d \u239b \u200b x y z \u200b \u23a0 \u239e \u200b https://katex.org/docs/supported.html https://katex.org/docs/support_table.html Markdown \u65b9\u6846 # Important \u7eff\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u6ce8\u91ca\u6216\u8005\u662f\u5bf9\u4e8eOpenGL\u6216\u8ba8\u8bba\u4e3b\u9898\u6709\u7528\u7684\u7279\u6027/\u63d0\u793a\u3002 Attention \u7ea2\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u8b66\u544a\u6216\u8005\u4e00\u4e9b\u4f60\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u7279\u6027\u3002 \u5907\u6ce8 \u84dd\u8272 \u65b9\u6846\u662f\u7ffb\u8bd1\u65f6\u4e3a\u4e86\u5e2e\u52a9\u8bfb\u8005\u7406\u89e3\u9644\u52a0\u7684\u4e00\u4e9b\u4fe1\u606f\u3002","title":"markdown"},{"location":"markdown/#markdown","text":"# \u4e00\u7ea7\u6807\u9898 ## \u4e8c\u7ea7\u6807\u9898 ### \u4e09\u7ea7\u6807\u9898 #### \u56db\u7ea7\u6807\u9898 ##### \u4e94\u7ea7\u6807\u9898 ###### \u516d\u7ea7\u6807\u9898","title":"Markdown \u6807\u9898"},{"location":"markdown/#markdown_1","text":"\u7ea2\u8272\u6587\u5b57 \u7eff\u8272\u6587\u5b57 \u84dd\u8272\u6587\u5b57 \u9ec4\u8272\u6587\u5b57 \u659c\u4f53\u6587\u672c \u659c\u4f53\u6587\u672c \u7c97\u4f53\u6587\u672c \u7c97\u4f53\u6587\u672c \u7c97\u659c\u4f53\u6587\u672c \u7c97\u659c\u4f53\u6587\u672c \u5206\u5272\u7ebf \u6d4b\u8bd5\u6587\u672c ~~\u6d4b\u8bd5\u6587\u672c~~ \u5e26\u4e0b\u5212\u7ebf\u6587\u672c","title":"Markdown \u6bb5\u843d"},{"location":"markdown/#markdown_2","text":"\u65e0\u5e8f\u5217\u8868\u4f7f\u7528\u661f\u53f7(*)\u3001\u52a0\u53f7(+)\u6216\u662f\u51cf\u53f7(-)\u4f5c\u4e3a\u5217\u8868\u6807\u8bb0\uff0c\u8fd9\u4e9b\u6807\u8bb0\u540e\u9762\u8981\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u518d\u586b\u5199\u5185\u5bb9\u3002\u6709\u5e8f\u5217\u8868\u4f7f\u7528\u6570\u5b57\u5e76\u52a0\u4e0a . \u53f7\u6765\u8868\u793a \u7b2c\u4e00\u9879 \u7b2c\u4e8c\u9879 \u7b2c\u4e09\u9879 \u7b2c\u4e00\u9879 \u7b2c\u4e8c\u9879 \u7b2c\u4e09\u9879 \u7b2c\u4e00\u9879 \u7b2c\u4e8c\u9879 \u7b2c\u4e09\u9879 \u7b2c\u4e00\u9879 \u7b2c\u4e8c\u9879 \u7b2c\u4e09\u9879 \u5217\u8868\u5d4c\u5957\u53ea\u9700\u5728\u5b50\u5217\u8868\u4e2d\u7684\u9009\u9879\u524d\u9762\u6dfb\u52a0\u56db\u4e2a\u7a7a\u683c\u5373\u53ef\uff1a \u7b2c\u4e00\u9879\uff1a \u7b2c\u4e00\u9879\u5d4c\u5957\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u7b2c\u4e00\u9879\u5d4c\u5957\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u7b2c\u4e8c\u9879\uff1a \u7b2c\u4e8c\u9879\u5d4c\u5957\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u7b2c\u4e8c\u9879\u5d4c\u5957\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20","title":"Markdown \u5217\u8868"},{"location":"markdown/#markdown_3","text":"\u533a\u5757\u5f15\u7528 \u83dc\u9e1f\u6559\u7a0b \u5b66\u7684\u4e0d\u4ec5\u662f\u6280\u672f\u66f4\u662f\u68a6\u60f3 \u6700\u5916\u5c42 \u7b2c\u4e00\u5c42\u5d4c\u5957 \u7b2c\u4e8c\u5c42\u5d4c\u5957","title":"Markdown \u533a\u5757"},{"location":"markdown/#markdown_4","text":"printf() \u51fd\u6570 int a = 0; int a = 0; $(document).ready(function () { alert('RUNOOB'); });","title":"Markdown \u4ee3\u7801"},{"location":"markdown/#markdown_5","text":"\u94fe\u63a5\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a [\u94fe\u63a5\u540d\u79f0](\u94fe\u63a5\u5730\u5740) \u6216\u8005 <\u94fe\u63a5\u5730\u5740>","title":"Markdown \u94fe\u63a5"},{"location":"markdown/#markdown_6","text":"","title":"Markdown \u56fe\u7247"},{"location":"markdown/#markdown_7","text":"Markdown \u5236\u4f5c\u8868\u683c\u4f7f\u7528 | \u6765\u5206\u9694\u4e0d\u540c\u7684\u5355\u5143\u683c\uff0c\u4f7f\u7528 - \u6765\u5206\u9694\u8868\u5934\u548c\u5176\u4ed6\u884c\u3002 \u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u8868\u683c\u7684\u5bf9\u9f50\u65b9\u5f0f\uff1a -: \u8bbe\u7f6e\u5185\u5bb9\u548c\u6807\u9898\u680f\u5c45\u53f3\u5bf9\u9f50\u3002 :- \u8bbe\u7f6e\u5185\u5bb9\u548c\u6807\u9898\u680f\u5c45\u5de6\u5bf9\u9f50\u3002 :-: \u8bbe\u7f6e\u5185\u5bb9\u548c\u6807\u9898\u680f\u5c45\u4e2d\u5bf9\u9f50\u3002 \u8868\u5934 \u8868\u5934 \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5de6\u5bf9\u9f50 \u53f3\u5bf9\u9f50 \u5c45\u4e2d\u5bf9\u9f50 \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c","title":"Markdown \u8868\u683c"},{"location":"markdown/#markdown_8","text":"\u652f\u6301\u7684 HTML \u5143\u7d20\uff0c\u4e0d\u5728 Markdown \u6db5\u76d6\u8303\u56f4\u4e4b\u5185\u7684\u6807\u7b7e\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u5728\u6587\u6863\u91cc\u9762\u7528 HTML \u64b0\u5199\u3002 \u76ee\u524d\u652f\u6301\u7684 HTML \u5143\u7d20\u6709\uff1a<kbd> <b> <i> <em> <sup> <sub> <br>\u7b49 \u4f7f\u7528 Ctrl + Alt + Del \u91cd\u542f\u7535\u8111 \u652f\u6301\u8f6c\u4e49\u5b57\u7b26 \u6587\u672c\u52a0\u7c97 ** \u6b63\u5e38\u663e\u793a\u661f\u53f7 ** Markdown \u652f\u6301\u4ee5\u4e0b\u8fd9\u4e9b\u7b26\u53f7\u524d\u9762\u52a0\u4e0a\u53cd\u659c\u6760\u6765\u5e2e\u52a9\u63d2\u5165\u666e\u901a\u7684\u7b26\u53f7\uff1a \\ \u53cd\u659c\u7ebf ` \u53cd\u5f15\u53f7 * \u661f\u53f7 _ \u4e0b\u5212\u7ebf {} \u82b1\u62ec\u53f7 [] \u65b9\u62ec\u53f7 () \u5c0f\u62ec\u53f7 # \u4e95\u5b57\u53f7 + \u52a0\u53f7 - \u51cf\u53f7 . \u82f1\u6587\u53e5\u70b9 ! \u611f\u53f9\u53f7","title":"Markdown \u9ad8\u7ea7\u6280\u5de7"},{"location":"markdown/#markdown_9","text":"\u5d4c\u5165\u4e86Katex\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528\u6570\u5b66\u516c\u5f0f f ( x ) = \u222b \u2212 \u221e \u221e f ^ ( \u03be ) \u2009 e 2 \u03c0 i \u03be x \u2009 d \u03be f(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi)\\,e^{2 \\pi i \\xi x} \\,d\\xi f ( x ) = \u222b \u2212 \u221e \u221e \u200b f ^ \u200b ( \u03be ) e 2 \u03c0i \u03be x d \u03be v \u02c9 = ( x y z ) \\bar{v} = \\begin{pmatrix} \\color{red}x \\\\ \\color{green}y \\\\ \\color{blue}z \\end{pmatrix} v \u02c9 = \u239d \u239b \u200b x y z \u200b \u23a0 \u239e \u200b https://katex.org/docs/supported.html https://katex.org/docs/support_table.html","title":"Markdown \u6570\u5b66\u516c\u5f0f"},{"location":"markdown/#markdown_10","text":"Important \u7eff\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u6ce8\u91ca\u6216\u8005\u662f\u5bf9\u4e8eOpenGL\u6216\u8ba8\u8bba\u4e3b\u9898\u6709\u7528\u7684\u7279\u6027/\u63d0\u793a\u3002 Attention \u7ea2\u8272 \u65b9\u6846\u662f\u4e00\u4e9b\u8b66\u544a\u6216\u8005\u4e00\u4e9b\u4f60\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u7279\u6027\u3002 \u5907\u6ce8 \u84dd\u8272 \u65b9\u6846\u662f\u7ffb\u8bd1\u65f6\u4e3a\u4e86\u5e2e\u52a9\u8bfb\u8005\u7406\u89e3\u9644\u52a0\u7684\u4e00\u4e9b\u4fe1\u606f\u3002","title":"Markdown \u65b9\u6846"},{"location":"OpenGL/Pipeline/","text":"Pipeline # OpenGL ES 3.2 pipeline # OpenGL \u57fa\u672c\u56fe\u5143 # Shader # none (Default) same as in in For parameter passed into a function out For values passed out of a function inout Function parameters passed in and out \u53c2\u8003 # https://www.khronos.org/opengl/wiki/Rendering_Pipeline_Overview OpenGL 4.5 Reference Guide OpenGL ES 3.2 Reference Guide","title":"Pipeline"},{"location":"OpenGL/Pipeline/#pipeline","text":"","title":"Pipeline"},{"location":"OpenGL/Pipeline/#opengl-es-32-pipeline","text":"","title":"OpenGL ES 3.2 pipeline"},{"location":"OpenGL/Pipeline/#opengl","text":"","title":"OpenGL \u57fa\u672c\u56fe\u5143"},{"location":"OpenGL/Pipeline/#shader","text":"none (Default) same as in in For parameter passed into a function out For values passed out of a function inout Function parameters passed in and out","title":"Shader"},{"location":"OpenGL/Pipeline/#_1","text":"https://www.khronos.org/opengl/wiki/Rendering_Pipeline_Overview OpenGL 4.5 Reference Guide OpenGL ES 3.2 Reference Guide","title":"\u53c2\u8003"},{"location":"OpenGL/VAO_VBO_EBO/","text":"VBO # \u9876\u70b9\u7f13\u51b2\u5bf9\u8c61(Vertex Buffer Object\u3001VBO)\uff1a\u7528\u4e8e\u5b58\u50a8\u9876\u70b9\u7684\u5404\u7c7b\u5c5e\u6027\u4fe1\u606f\uff08\u5982\u9876\u70b9\u5750\u6807\u3001\u9876\u70b9\u6cd5\u5411\u91cf\u3001\u9876\u70b9\u989c\u8272\u7b49\uff09\u3002\u5728\u6e32\u67d3\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4eceVBO\u4e2d\u8bfb\u53d6\u9876\u70b9\u7684\u5404\u7c7b\u5c5e\u6027\u6570\u636e\uff0c\u7531\u4e8eVBO\u5728\u663e\u5b58\u4e2d\u800c\u4e0d\u662f\u5728\u5185\u5b58\u4e2d\uff0c\u5904\u7406\u6548\u7387\u66f4\u9ad8\u3002\u6bcf\u4e2aVBO\u5728OpenGL\u4e2d\u6709\u552f\u4e00\u6807\u8bc6ID\uff0c\u901a\u8fc7\u8fd9\u4e2aID\u53ef\u4ee5\u5bf9\u7279\u5b9a\u7684VBO\u5185\u7684\u6570\u636e\u8fdb\u884c\u5b58\u53d6\u64cd\u4f5c\u3002 EBO # \u7d22\u5f15\u7f13\u51b2\u5bf9\u8c61(Element Buffer Object\uff0cEBO\u6216Index Buffer Object\uff0cIBO)\uff1a\u5f53\u9700\u8981\u4f7f\u7528\u91cd\u590d\u7684\u9876\u70b9\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7EBO\u8282\u7701\u5185\u5b58\uff0c\u63d0\u9ad8\u6267\u884c\u6548\u7387\u3002EBO\u4e2d\u5b58\u50a8\u7684\u5185\u5bb9\u5c31\u662f\u9876\u70b9\u4f4d\u7f6e\u7684\u7d22\u5f15\uff0cEBO\u8ddfVBO\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7EBO\u4fdd\u5b58\u7684\u662f\u9876\u70b9\u7684\u7d22\u5f15\u3002 VAO # \u9876\u70b9\u6570\u7ec4\u5bf9\u8c61(Vertex Array Object\u3001VAO)\uff1a\u53ef\u4ee5\u50cfVBO\u90a3\u6837\u88ab\u7ed1\u5b9a\uff0c\u4efb\u4f55\u968f\u540e\u7684\u9876\u70b9\u5c5e\u6027\u8bbe\u7f6e\u90fd\u4f1a\u50a8\u5b58\u5728\u8fd9\u4e2aVAO\u4e2d\uff0c\u4e4b\u540e\u5728\u7ed8\u5236\u7269\u4f53\u7684\u65f6\u5019\u53ea\u9700\u8981\u7ed1\u5b9a\u76f8\u5e94\u7684VAO\u5c31\u53ef\u4ee5\u3002\u5728\u4e0d\u540c\u9876\u70b9\u6570\u636e\u548c\u5c5e\u6027\u914d\u7f6e\u4e4b\u95f4\u5207\u6362\u65f6\uff0c\u53ea\u9700\u7ed1\u5b9a\u4e0d\u540c\u7684VAO\u5c31\u53ef\u4ee5\u3002 \u4e00\u4e2aVAO\u4f1a\u50a8\u5b58\u4ee5\u4e0b\u8fd9\u4e9b\u5185\u5bb9\uff1a glEnableVertexAttribArray\u548cglDisableVertexAttribArray\u7684\u8c03\u7528\uff1b \u901a\u8fc7glVertexAttribPointer\u8bbe\u7f6e\u7684\u9876\u70b9\u5c5e\u6027\u914d\u7f6e\uff1b \u901a\u8fc7glVertexAttribPointer\u8c03\u7528\u4e0e\u9876\u70b9\u5c5e\u6027\u5173\u8054\u7684VBO\uff1b \u5f53\u76ee\u6807\u662fGL_ELEMENT_ARRAY_BUFFER\u7684\u65f6\u5019\uff0cVAO\u4f1a\u50a8\u5b58glBindBuffer\u7684\u51fd\u6570\u8c03\u7528\uff1b \u8fd9\u610f\u5473\u7740\u5b83\u4e5f\u4f1a\u50a8\u5b58\u89e3\u7ed1\u8c03\u7528\uff0c\u6240\u4ee5\u786e\u4fdd\u5728\u89e3\u7ed1VAO\u4e4b\u524d\u6ca1\u6709\u89e3\u7ed1EBO\uff0c\u5426\u5219\u5b83\u5c31\u6ca1\u6709\u8fd9\u4e2aEBO\u914d\u7f6e\u4e86\u3002 \u603b\u7ed3 # VBO \u5b58\u50a8\u9876\u70b9\u6570\u636e EBO \u5b58\u50a8\u9876\u70b9\u7d22\u5f15 VAO \u5b58\u50a8\u7f13\u51b2\u533a\u548c\u9876\u70b9\u5c5e\u6027\u72b6\u6001 // set up vertex data (and buffer(s)) and configure vertex attributes float vertices[] = { 0.5f, 0.5f, 0.0f, // top right 0.5f, -0.5f, 0.0f, // bottom right -0.5f, -0.5f, 0.0f, // bottom left -0.5f, 0.5f, 0.0f // top left }; unsigned int indices[] = { // note that we start from 0! 0, 1, 3, // first Triangle 1, 2, 3 // second Triangle }; unsigned int VBO, VAO, EBO; glGenVertexArrays(1, &VAO); glGenBuffers(1, &VBO); glGenBuffers(1, &EBO); // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s). glBindVertexArray(VAO); glBindBuffer(GL_ARRAY_BUFFER, VBO); glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO); glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW); glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0); glEnableVertexAttribArray(0); // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind glBindBuffer(GL_ARRAY_BUFFER, 0); // remember: do NOT unbind the EBO while a VAO is active as the bound element buffer object IS stored in the VAO; keep the EBO bound. //glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0); // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary. glBindVertexArray(0); // ... \u7701\u7565\u90e8\u5206\u4ee3\u7801 // render loop // ----------- glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized //glDrawArrays(GL_TRIANGLES, 0, 6); glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0); // glBindVertexArray(0); // no need to unbind it every time glSwapBuffers();","title":"VAO\u3001VBO\u3001EBO"},{"location":"OpenGL/VAO_VBO_EBO/#vbo","text":"\u9876\u70b9\u7f13\u51b2\u5bf9\u8c61(Vertex Buffer Object\u3001VBO)\uff1a\u7528\u4e8e\u5b58\u50a8\u9876\u70b9\u7684\u5404\u7c7b\u5c5e\u6027\u4fe1\u606f\uff08\u5982\u9876\u70b9\u5750\u6807\u3001\u9876\u70b9\u6cd5\u5411\u91cf\u3001\u9876\u70b9\u989c\u8272\u7b49\uff09\u3002\u5728\u6e32\u67d3\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4eceVBO\u4e2d\u8bfb\u53d6\u9876\u70b9\u7684\u5404\u7c7b\u5c5e\u6027\u6570\u636e\uff0c\u7531\u4e8eVBO\u5728\u663e\u5b58\u4e2d\u800c\u4e0d\u662f\u5728\u5185\u5b58\u4e2d\uff0c\u5904\u7406\u6548\u7387\u66f4\u9ad8\u3002\u6bcf\u4e2aVBO\u5728OpenGL\u4e2d\u6709\u552f\u4e00\u6807\u8bc6ID\uff0c\u901a\u8fc7\u8fd9\u4e2aID\u53ef\u4ee5\u5bf9\u7279\u5b9a\u7684VBO\u5185\u7684\u6570\u636e\u8fdb\u884c\u5b58\u53d6\u64cd\u4f5c\u3002","title":"VBO"},{"location":"OpenGL/VAO_VBO_EBO/#ebo","text":"\u7d22\u5f15\u7f13\u51b2\u5bf9\u8c61(Element Buffer Object\uff0cEBO\u6216Index Buffer Object\uff0cIBO)\uff1a\u5f53\u9700\u8981\u4f7f\u7528\u91cd\u590d\u7684\u9876\u70b9\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7EBO\u8282\u7701\u5185\u5b58\uff0c\u63d0\u9ad8\u6267\u884c\u6548\u7387\u3002EBO\u4e2d\u5b58\u50a8\u7684\u5185\u5bb9\u5c31\u662f\u9876\u70b9\u4f4d\u7f6e\u7684\u7d22\u5f15\uff0cEBO\u8ddfVBO\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7EBO\u4fdd\u5b58\u7684\u662f\u9876\u70b9\u7684\u7d22\u5f15\u3002","title":"EBO"},{"location":"OpenGL/VAO_VBO_EBO/#vao","text":"\u9876\u70b9\u6570\u7ec4\u5bf9\u8c61(Vertex Array Object\u3001VAO)\uff1a\u53ef\u4ee5\u50cfVBO\u90a3\u6837\u88ab\u7ed1\u5b9a\uff0c\u4efb\u4f55\u968f\u540e\u7684\u9876\u70b9\u5c5e\u6027\u8bbe\u7f6e\u90fd\u4f1a\u50a8\u5b58\u5728\u8fd9\u4e2aVAO\u4e2d\uff0c\u4e4b\u540e\u5728\u7ed8\u5236\u7269\u4f53\u7684\u65f6\u5019\u53ea\u9700\u8981\u7ed1\u5b9a\u76f8\u5e94\u7684VAO\u5c31\u53ef\u4ee5\u3002\u5728\u4e0d\u540c\u9876\u70b9\u6570\u636e\u548c\u5c5e\u6027\u914d\u7f6e\u4e4b\u95f4\u5207\u6362\u65f6\uff0c\u53ea\u9700\u7ed1\u5b9a\u4e0d\u540c\u7684VAO\u5c31\u53ef\u4ee5\u3002 \u4e00\u4e2aVAO\u4f1a\u50a8\u5b58\u4ee5\u4e0b\u8fd9\u4e9b\u5185\u5bb9\uff1a glEnableVertexAttribArray\u548cglDisableVertexAttribArray\u7684\u8c03\u7528\uff1b \u901a\u8fc7glVertexAttribPointer\u8bbe\u7f6e\u7684\u9876\u70b9\u5c5e\u6027\u914d\u7f6e\uff1b \u901a\u8fc7glVertexAttribPointer\u8c03\u7528\u4e0e\u9876\u70b9\u5c5e\u6027\u5173\u8054\u7684VBO\uff1b \u5f53\u76ee\u6807\u662fGL_ELEMENT_ARRAY_BUFFER\u7684\u65f6\u5019\uff0cVAO\u4f1a\u50a8\u5b58glBindBuffer\u7684\u51fd\u6570\u8c03\u7528\uff1b \u8fd9\u610f\u5473\u7740\u5b83\u4e5f\u4f1a\u50a8\u5b58\u89e3\u7ed1\u8c03\u7528\uff0c\u6240\u4ee5\u786e\u4fdd\u5728\u89e3\u7ed1VAO\u4e4b\u524d\u6ca1\u6709\u89e3\u7ed1EBO\uff0c\u5426\u5219\u5b83\u5c31\u6ca1\u6709\u8fd9\u4e2aEBO\u914d\u7f6e\u4e86\u3002","title":"VAO"},{"location":"OpenGL/VAO_VBO_EBO/#_1","text":"VBO \u5b58\u50a8\u9876\u70b9\u6570\u636e EBO \u5b58\u50a8\u9876\u70b9\u7d22\u5f15 VAO \u5b58\u50a8\u7f13\u51b2\u533a\u548c\u9876\u70b9\u5c5e\u6027\u72b6\u6001 // set up vertex data (and buffer(s)) and configure vertex attributes float vertices[] = { 0.5f, 0.5f, 0.0f, // top right 0.5f, -0.5f, 0.0f, // bottom right -0.5f, -0.5f, 0.0f, // bottom left -0.5f, 0.5f, 0.0f // top left }; unsigned int indices[] = { // note that we start from 0! 0, 1, 3, // first Triangle 1, 2, 3 // second Triangle }; unsigned int VBO, VAO, EBO; glGenVertexArrays(1, &VAO); glGenBuffers(1, &VBO); glGenBuffers(1, &EBO); // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s). glBindVertexArray(VAO); glBindBuffer(GL_ARRAY_BUFFER, VBO); glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO); glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW); glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0); glEnableVertexAttribArray(0); // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind glBindBuffer(GL_ARRAY_BUFFER, 0); // remember: do NOT unbind the EBO while a VAO is active as the bound element buffer object IS stored in the VAO; keep the EBO bound. //glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0); // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary. glBindVertexArray(0); // ... \u7701\u7565\u90e8\u5206\u4ee3\u7801 // render loop // ----------- glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized //glDrawArrays(GL_TRIANGLES, 0, 6); glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0); // glBindVertexArray(0); // no need to unbind it every time glSwapBuffers();","title":"\u603b\u7ed3"},{"location":"OpenGL/%E5%85%89%E6%BA%90/","text":"\u6750\u8d28 # https://learnopengl-cn.github.io/02%20Lighting/05%20Light%20casters/ \u8ddd\u79bb \u5e38\u6570\u9879 \u4e00\u6b21\u9879 \u4e8c\u6b21\u9879 7 1.0 0.7 1.8 13 1.0 0.35 0.44 20 1.0 0.22 0.20 32 1.0 0.14 0.07 50 1.0 0.09 0.032 65 1.0 0.07 0.017 100 1.0 0.045 0.0075 160 1.0 0.027 0.0028 200 1.0 0.022 0.0019 325 1.0 0.014 0.0007 600 1.0 0.007 0.0002 3250 1.0 0.0014 0.000007","title":"\u6750\u8d28"},{"location":"OpenGL/%E5%85%89%E6%BA%90/#_1","text":"https://learnopengl-cn.github.io/02%20Lighting/05%20Light%20casters/ \u8ddd\u79bb \u5e38\u6570\u9879 \u4e00\u6b21\u9879 \u4e8c\u6b21\u9879 7 1.0 0.7 1.8 13 1.0 0.35 0.44 20 1.0 0.22 0.20 32 1.0 0.14 0.07 50 1.0 0.09 0.032 65 1.0 0.07 0.017 100 1.0 0.045 0.0075 160 1.0 0.027 0.0028 200 1.0 0.022 0.0019 325 1.0 0.014 0.0007 600 1.0 0.007 0.0002 3250 1.0 0.0014 0.000007","title":"\u6750\u8d28"},{"location":"OpenGL/%E5%85%89%E7%85%A7/","text":".katex img { object-fit: fill; padding: unset; display: block; position: absolute; width: 100%; height: inherit; } \u5149\u7167 # \u53c2\u8003 https://learnopengl-cn.github.io/02%20Lighting/02%20Basic%20Lighting/ \u73b0\u5b9e\u4e16\u754c\u7684\u5149\u7167\u662f\u6781\u5176\u590d\u6742\u7684\uff0c\u800c\u4e14\u4f1a\u53d7\u5230\u8bf8\u591a\u56e0\u7d20\u7684\u5f71\u54cd\uff0c\u8fd9\u662f\u6211\u4eec\u6709\u9650\u7684\u8ba1\u7b97\u80fd\u529b\u6240\u65e0\u6cd5\u6a21\u62df\u7684\u3002\u56e0\u6b64OpenGL\u7684\u5149\u7167\u4f7f\u7528\u7684\u662f\u7b80\u5316\u7684\u6a21\u578b\uff0c\u5bf9\u73b0\u5b9e\u7684\u60c5\u51b5\u8fdb\u884c\u8fd1\u4f3c\uff0c\u8fd9\u6837\u5904\u7406\u8d77\u6765\u4f1a\u66f4\u5bb9\u6613\u4e00\u4e9b\uff0c\u800c\u4e14\u770b\u8d77\u6765\u4e5f\u5dee\u4e0d\u591a\u4e00\u6837\u3002 \u8fd9\u4e9b\u5149\u7167\u6a21\u578b\u90fd\u662f\u57fa\u4e8e\u6211\u4eec\u5bf9\u5149\u7684\u7269\u7406\u7279\u6027\u7684\u7406\u89e3\u3002\u5176\u4e2d\u4e00\u4e2a\u6a21\u578b\u88ab\u79f0\u4e3a\u51af\u6c0f\u5149\u7167\u6a21\u578b(Phong Lighting Model)\u3002 \u51af\u6c0f\u5149\u7167\u6a21\u578b\u7684\u4e3b\u8981\u7ed3\u6784\u75313\u4e2a\u5206\u91cf\u7ec4\u6210\uff1a\u73af\u5883(Ambient)\u3001\u6f2b\u53cd\u5c04(Diffuse)\u548c\u955c\u9762(Specular)\u5149\u7167 \u73af\u5883\u5149\u7167(Ambient Lighting)\uff1a\u5373\u4f7f\u5728\u9ed1\u6697\u7684\u60c5\u51b5\u4e0b\uff0c\u4e16\u754c\u4e0a\u901a\u5e38\u4e5f\u4ecd\u7136\u6709\u4e00\u4e9b\u5149\u4eae\uff08\u6708\u4eae\u3001\u8fdc\u5904\u7684\u5149\uff09\uff0c\u6240\u4ee5\u7269\u4f53\u51e0\u4e4e\u6c38\u8fdc\u4e0d\u4f1a\u662f\u5b8c\u5168\u9ed1\u6697\u7684\u3002\u4e3a\u4e86\u6a21\u62df\u8fd9\u4e2a\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2a\u73af\u5883\u5149\u7167\u5e38\u91cf\uff0c\u5b83\u6c38\u8fdc\u4f1a\u7ed9\u7269\u4f53\u4e00\u4e9b\u989c\u8272\u3002 \u6f2b\u53cd\u5c04\u5149\u7167(Diffuse Lighting)\uff1a\u6a21\u62df\u5149\u6e90\u5bf9\u7269\u4f53\u7684\u65b9\u5411\u6027\u5f71\u54cd(Directional Impact)\u3002\u5b83\u662f\u51af\u6c0f\u5149\u7167\u6a21\u578b\u4e2d\u89c6\u89c9\u4e0a\u6700\u663e\u8457\u7684\u5206\u91cf\u3002\u7269\u4f53\u7684\u67d0\u4e00\u90e8\u5206\u8d8a\u662f\u6b63\u5bf9\u7740\u5149\u6e90\uff0c\u5b83\u5c31\u4f1a\u8d8a\u4eae\u3002 \u955c\u9762\u5149\u7167(Specular Lighting)\uff1a\u6a21\u62df\u6709\u5149\u6cfd\u7269\u4f53\u4e0a\u9762\u51fa\u73b0\u7684\u4eae\u70b9\u3002\u955c\u9762\u5149\u7167\u7684\u989c\u8272\u76f8\u6bd4\u4e8e\u7269\u4f53\u7684\u989c\u8272\u4f1a\u66f4\u503e\u5411\u4e8e\u5149\u7684\u989c\u8272\u3002 \u73af\u5883\u5149\u7167(Ambient Lighting) # void main() { float ambientStrength = 0.1; //\u73af\u5883\u56e0\u5b50 vec3 ambient = ambientStrength * lightColor; vec3 result = ambient * objectColor; FragColor = vec4(result, 1.0); } \u6f2b\u53cd\u5c04\u5149\u7167(Diffuse Lighting) # \u6f2b\u53cd\u5c04\u5149\u7167\u4f7f\u7269\u4f53\u4e0a\u4e0e\u5149\u7ebf\u65b9\u5411\u8d8a\u63a5\u8fd1\u7684\u7247\u6bb5(\u5149\u7ebf\u548c\u7247\u6bb5\u7684\u89d2\u5ea6\u8d8a\u5c0f)\u8d8a\u80fd\u4ece\u5149\u6e90\u5904\u83b7\u5f97\u66f4\u591a\u7684\u4eae\u5ea6\uff0c\u5982\u679c\u5149\u7ebf\u5782\u76f4\u4e8e\u7269\u4f53\u8868\u9762\uff0c\u8fd9\u675f\u5149\u5bf9\u7269\u4f53\u7684\u5f71\u54cd\u4f1a\u6700\u5927\u5316\uff08\u5373\u8fbe\u5230\u6700\u4eae\uff09\u3002\u4e3a\u4e86\u80fd\u591f\u66f4\u597d\u7684\u7406\u89e3\u6f2b\u53cd\u5c04\u5149\u7167\uff0c\u8bf7\u770b\u4e0b\u56fe\uff1a Back \u6cd5\u5411\u91cf(Normal Vector) # \u4e3a\u4e86\u6d4b\u91cf\u5149\u7ebf\u548c\u7247\u6bb5\u7684\u89d2\u5ea6\uff0c\u6211\u4eec\u4f7f\u7528\u6cd5\u5411\u91cf(Normal Vector)\uff0c\u5b83\u662f\u4e00\u4e2a\u5782\u76f4\u4e8e\u9876\u70b9\u8868\u9762\u7684\uff08\u5355\u4f4d\uff09\u5411\u91cf\uff08\u4e0a\u56fe\u4e2d\u4ee5\u9ec4\u8272\u7bad\u5934\u8868\u793a\uff09\uff0c\u8fd9\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u89d2\u5ea6\u5f88\u5bb9\u6613\u5c31\u80fd\u591f\u901a\u8fc7\u70b9\u4e58\u8ba1\u7b97\u51fa\u6765\u3002\u53ef\u4ee5\u4f7f\u7528\u6cd5\u7ebf\u8d34\u56fe\u6765\u5b58\u50a8\u9876\u70b9\u7684\u6cd5\u7ebf\u3002 Important l: \u5149\u7167\u5411\u91cf n: \u6cd5\u7ebf\u5411\u91cf cos \u2061 \u03b8 = L \u02c9 \u22c5 N \u02c9 \u2223 \u2223 L \u02c9 \u2223 \u2223 \u22c5 \u2223 \u2223 N \u02c9 \u2223 \u2223 \\cos \\theta = \\frac{\\bar{L} \\cdot \\bar{N}}{||\\bar{L}|| \\cdot ||\\bar{N}||} cos \u03b8 = \u2223\u2223 L \u02c9 \u2223\u2223 \u22c5 \u2223\u2223 N \u02c9 \u2223\u2223 L \u02c9 \u22c5 N \u02c9 \u200b //\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u89d2\u5ea6\u5927\u4e8e90\u5ea6\u65f6\uff0c\u70b9\u4e58\u7ed3\u679c\u4e3a\u8d1f\u6570\uff0c\u5bfc\u81f4\u6f2b\u53cd\u5c04\u5206\u91cf\u4e3a\u8d1f\u6570\u3002\u8d1f\u6570\u989c\u8272\u7684\u5149\u7167\u6ca1\u6709\u610f\u4e49\u3002 float diff = max(dot(norm, lightDir), 0.0); vec3 diffuse = diff * lightColor; vec3 result = (ambient + diffuse) * objectColor; FragColor = vec4(result, 1.0); \u6cd5\u7ebf\u77e9\u9635(Normal Matrix) # \u5f53\u5e94\u7528\u4e00\u4e2a\u4e0d\u7b49\u6bd4\u7f29\u653e\u65f6\uff0c\u6cd5\u5411\u91cf\u5c31\u4e0d\u4f1a\u518d\u5782\u76f4\u4e8e\u5bf9\u5e94\u7684\u8868\u9762\uff0c\u8fd9\u6837\u5149\u7167\u5c31\u4f1a\u88ab\u7834\u574f\u3002\u4fee\u590d\u8fd9\u4e2a\u884c\u4e3a\u7684\u8bc0\u7a8d\u662f\u4f7f\u7528\u4e00\u4e2a\u4e3a\u6cd5\u5411\u91cf\u4e13\u95e8\u5b9a\u5236\u7684\u6a21\u578b\u77e9\u9635\u3002\u8fd9\u4e2a\u77e9\u9635\u79f0\u4e4b\u4e3a \u6cd5\u7ebf\u77e9\u9635(Normal Matrix) \u3002\u5b83\u4f7f\u7528\u4e86\u4e00\u4e9b\u7ebf\u6027\u4ee3\u6570\u7684\u64cd\u4f5c\u6765\u79fb\u9664\u5bf9\u6cd5\u5411\u91cf\u9519\u8bef\u7f29\u653e\u7684\u5f71\u54cd\u3002 \u6cd5\u7ebf\u77e9\u9635\u88ab\u5b9a\u4e49\u4e3a\u300c\u6a21\u578b\u77e9\u9635\u7684\u9006\u77e9\u9635\u7684\u8f6c\u7f6e\u77e9\u9635\u300d Back Attention \u5373\u4f7f\u662f\u5bf9\u4e8e\u7740\u8272\u5668\u6765\u8bf4\uff0c\u9006\u77e9\u9635\u4e5f\u662f\u4e00\u4e2a\u5f00\u9500\u6bd4\u8f83\u5927\u7684\u8fd0\u7b97\uff0c\u56e0\u6b64\uff0c\u5e94\u8be5\u907f\u514d\u5728\u7740\u8272\u5668\u4e2d\u8fdb\u884c\u9006\u77e9\u9635\u8fd0\u7b97\uff0c\u5728\u7ed8\u5236\u4e4b\u524d\u6700\u597d\u7528CPU\u8ba1\u7b97\u51fa\u6cd5\u7ebf\u77e9\u9635\uff0c\u7136\u540e\u901a\u8fc7uniform\u628a\u503c\u4f20\u9012\u7ed9\u7740\u8272\u5668\u3002 \u955c\u9762\u5149\u7167(Specular Lighting) # \u548c\u6f2b\u53cd\u5c04\u5149\u7167\u4e00\u6837\uff0c\u955c\u9762\u5149\u7167\u4e5f\u662f\u5149\u7684\u65b9\u5411\u5411\u91cf\u548c\u7269\u4f53\u7684\u6cd5\u5411\u91cf\u6765\u51b3\u5b9a\u7684\u3002\u955c\u9762\u5149\u7167\u662f\u57fa\u4e8e\u5149\u7684\u53cd\u5c04\u7279\u6027\uff08\u53cd\u5c04\u89d2\u7b49\u4e8e\u5165\u5c04\u89d2\uff09\u3002 \u4f46\u662f\u5b83\u4e5f\u4f9d\u8d56\u4e8e\u89c2\u5bdf\u65b9\u5411\uff0c\u53cd\u5c04\u5411\u91cf\u548c\u89c6\u7ebf\u65b9\u5411\u7684\u5939\u89d2\u8d8a\u5c0f\uff0c\u955c\u9762\u5149\u7684\u5f71\u54cd\u5c31\u4f1a\u8d8a\u5927\uff08\u5f62\u6210\u9ad8\u5149\uff09\u3002 Back float specularStrength = 0.5; vec3 viewDir = normalize(viewPos - FragPos); vec3 reflectDir = reflect(-lightDir, norm); //32\u6b21\u5e42\u3002\u8fd9\u4e2a32\u662f\u9ad8\u5149\u7684\u53cd\u5149\u5ea6(Shininess)\u3002 //\u4e00\u4e2a\u7269\u4f53\u7684\u53cd\u5149\u5ea6\u8d8a\u9ad8\uff0c\u53cd\u5c04\u5149\u7684\u80fd\u529b\u8d8a\u5f3a\uff0c\u6563\u5c04\u5f97\u8d8a\u5c11\uff0c\u9ad8\u5149\u70b9\u5c31\u4f1a\u8d8a\u5c0f\u3002 float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); vec3 specular = specularStrength * spec * lightColor; vec3 result = (ambient + diffuse + specular) * objectColor; FragColor = vec4(result, 1.0); \u4e0d\u540c \u53cd\u5149\u5ea6 \u7684\u89c6\u89c9\u6548\u679c\u5f71\u54cd Demo # //fragment shader #version 330 core out vec4 FragColor; in vec3 Normal; in vec3 FragPos; uniform vec3 lightPos; uniform vec3 viewPos; uniform vec3 lightColor; uniform vec3 objectColor; void main() { // ambient float ambientStrength = 0.1; vec3 ambient = ambientStrength * lightColor; // diffuse vec3 norm = normalize(Normal); vec3 lightDir = normalize(lightPos - FragPos); float diff = max(dot(norm, lightDir), 0.0); vec3 diffuse = diff * lightColor; // specular float specularStrength = 0.5; vec3 viewDir = normalize(viewPos - FragPos); vec3 reflectDir = reflect(-lightDir, norm); float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); vec3 specular = specularStrength * spec * lightColor; vec3 result = (ambient + diffuse + specular) * objectColor; FragColor = vec4(result, 1.0); }","title":"\u5149\u7167"},{"location":"OpenGL/%E5%85%89%E7%85%A7/#_1","text":"\u53c2\u8003 https://learnopengl-cn.github.io/02%20Lighting/02%20Basic%20Lighting/ \u73b0\u5b9e\u4e16\u754c\u7684\u5149\u7167\u662f\u6781\u5176\u590d\u6742\u7684\uff0c\u800c\u4e14\u4f1a\u53d7\u5230\u8bf8\u591a\u56e0\u7d20\u7684\u5f71\u54cd\uff0c\u8fd9\u662f\u6211\u4eec\u6709\u9650\u7684\u8ba1\u7b97\u80fd\u529b\u6240\u65e0\u6cd5\u6a21\u62df\u7684\u3002\u56e0\u6b64OpenGL\u7684\u5149\u7167\u4f7f\u7528\u7684\u662f\u7b80\u5316\u7684\u6a21\u578b\uff0c\u5bf9\u73b0\u5b9e\u7684\u60c5\u51b5\u8fdb\u884c\u8fd1\u4f3c\uff0c\u8fd9\u6837\u5904\u7406\u8d77\u6765\u4f1a\u66f4\u5bb9\u6613\u4e00\u4e9b\uff0c\u800c\u4e14\u770b\u8d77\u6765\u4e5f\u5dee\u4e0d\u591a\u4e00\u6837\u3002 \u8fd9\u4e9b\u5149\u7167\u6a21\u578b\u90fd\u662f\u57fa\u4e8e\u6211\u4eec\u5bf9\u5149\u7684\u7269\u7406\u7279\u6027\u7684\u7406\u89e3\u3002\u5176\u4e2d\u4e00\u4e2a\u6a21\u578b\u88ab\u79f0\u4e3a\u51af\u6c0f\u5149\u7167\u6a21\u578b(Phong Lighting Model)\u3002 \u51af\u6c0f\u5149\u7167\u6a21\u578b\u7684\u4e3b\u8981\u7ed3\u6784\u75313\u4e2a\u5206\u91cf\u7ec4\u6210\uff1a\u73af\u5883(Ambient)\u3001\u6f2b\u53cd\u5c04(Diffuse)\u548c\u955c\u9762(Specular)\u5149\u7167 \u73af\u5883\u5149\u7167(Ambient Lighting)\uff1a\u5373\u4f7f\u5728\u9ed1\u6697\u7684\u60c5\u51b5\u4e0b\uff0c\u4e16\u754c\u4e0a\u901a\u5e38\u4e5f\u4ecd\u7136\u6709\u4e00\u4e9b\u5149\u4eae\uff08\u6708\u4eae\u3001\u8fdc\u5904\u7684\u5149\uff09\uff0c\u6240\u4ee5\u7269\u4f53\u51e0\u4e4e\u6c38\u8fdc\u4e0d\u4f1a\u662f\u5b8c\u5168\u9ed1\u6697\u7684\u3002\u4e3a\u4e86\u6a21\u62df\u8fd9\u4e2a\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2a\u73af\u5883\u5149\u7167\u5e38\u91cf\uff0c\u5b83\u6c38\u8fdc\u4f1a\u7ed9\u7269\u4f53\u4e00\u4e9b\u989c\u8272\u3002 \u6f2b\u53cd\u5c04\u5149\u7167(Diffuse Lighting)\uff1a\u6a21\u62df\u5149\u6e90\u5bf9\u7269\u4f53\u7684\u65b9\u5411\u6027\u5f71\u54cd(Directional Impact)\u3002\u5b83\u662f\u51af\u6c0f\u5149\u7167\u6a21\u578b\u4e2d\u89c6\u89c9\u4e0a\u6700\u663e\u8457\u7684\u5206\u91cf\u3002\u7269\u4f53\u7684\u67d0\u4e00\u90e8\u5206\u8d8a\u662f\u6b63\u5bf9\u7740\u5149\u6e90\uff0c\u5b83\u5c31\u4f1a\u8d8a\u4eae\u3002 \u955c\u9762\u5149\u7167(Specular Lighting)\uff1a\u6a21\u62df\u6709\u5149\u6cfd\u7269\u4f53\u4e0a\u9762\u51fa\u73b0\u7684\u4eae\u70b9\u3002\u955c\u9762\u5149\u7167\u7684\u989c\u8272\u76f8\u6bd4\u4e8e\u7269\u4f53\u7684\u989c\u8272\u4f1a\u66f4\u503e\u5411\u4e8e\u5149\u7684\u989c\u8272\u3002","title":"\u5149\u7167"},{"location":"OpenGL/%E5%85%89%E7%85%A7/#ambient-lighting","text":"void main() { float ambientStrength = 0.1; //\u73af\u5883\u56e0\u5b50 vec3 ambient = ambientStrength * lightColor; vec3 result = ambient * objectColor; FragColor = vec4(result, 1.0); }","title":"\u73af\u5883\u5149\u7167(Ambient Lighting)"},{"location":"OpenGL/%E5%85%89%E7%85%A7/#diffuse-lighting","text":"\u6f2b\u53cd\u5c04\u5149\u7167\u4f7f\u7269\u4f53\u4e0a\u4e0e\u5149\u7ebf\u65b9\u5411\u8d8a\u63a5\u8fd1\u7684\u7247\u6bb5(\u5149\u7ebf\u548c\u7247\u6bb5\u7684\u89d2\u5ea6\u8d8a\u5c0f)\u8d8a\u80fd\u4ece\u5149\u6e90\u5904\u83b7\u5f97\u66f4\u591a\u7684\u4eae\u5ea6\uff0c\u5982\u679c\u5149\u7ebf\u5782\u76f4\u4e8e\u7269\u4f53\u8868\u9762\uff0c\u8fd9\u675f\u5149\u5bf9\u7269\u4f53\u7684\u5f71\u54cd\u4f1a\u6700\u5927\u5316\uff08\u5373\u8fbe\u5230\u6700\u4eae\uff09\u3002\u4e3a\u4e86\u80fd\u591f\u66f4\u597d\u7684\u7406\u89e3\u6f2b\u53cd\u5c04\u5149\u7167\uff0c\u8bf7\u770b\u4e0b\u56fe\uff1a Back","title":"\u6f2b\u53cd\u5c04\u5149\u7167(Diffuse Lighting)"},{"location":"OpenGL/%E5%85%89%E7%85%A7/#normal-vector","text":"\u4e3a\u4e86\u6d4b\u91cf\u5149\u7ebf\u548c\u7247\u6bb5\u7684\u89d2\u5ea6\uff0c\u6211\u4eec\u4f7f\u7528\u6cd5\u5411\u91cf(Normal Vector)\uff0c\u5b83\u662f\u4e00\u4e2a\u5782\u76f4\u4e8e\u9876\u70b9\u8868\u9762\u7684\uff08\u5355\u4f4d\uff09\u5411\u91cf\uff08\u4e0a\u56fe\u4e2d\u4ee5\u9ec4\u8272\u7bad\u5934\u8868\u793a\uff09\uff0c\u8fd9\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u89d2\u5ea6\u5f88\u5bb9\u6613\u5c31\u80fd\u591f\u901a\u8fc7\u70b9\u4e58\u8ba1\u7b97\u51fa\u6765\u3002\u53ef\u4ee5\u4f7f\u7528\u6cd5\u7ebf\u8d34\u56fe\u6765\u5b58\u50a8\u9876\u70b9\u7684\u6cd5\u7ebf\u3002 Important l: \u5149\u7167\u5411\u91cf n: \u6cd5\u7ebf\u5411\u91cf cos \u2061 \u03b8 = L \u02c9 \u22c5 N \u02c9 \u2223 \u2223 L \u02c9 \u2223 \u2223 \u22c5 \u2223 \u2223 N \u02c9 \u2223 \u2223 \\cos \\theta = \\frac{\\bar{L} \\cdot \\bar{N}}{||\\bar{L}|| \\cdot ||\\bar{N}||} cos \u03b8 = \u2223\u2223 L \u02c9 \u2223\u2223 \u22c5 \u2223\u2223 N \u02c9 \u2223\u2223 L \u02c9 \u22c5 N \u02c9 \u200b //\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u89d2\u5ea6\u5927\u4e8e90\u5ea6\u65f6\uff0c\u70b9\u4e58\u7ed3\u679c\u4e3a\u8d1f\u6570\uff0c\u5bfc\u81f4\u6f2b\u53cd\u5c04\u5206\u91cf\u4e3a\u8d1f\u6570\u3002\u8d1f\u6570\u989c\u8272\u7684\u5149\u7167\u6ca1\u6709\u610f\u4e49\u3002 float diff = max(dot(norm, lightDir), 0.0); vec3 diffuse = diff * lightColor; vec3 result = (ambient + diffuse) * objectColor; FragColor = vec4(result, 1.0);","title":"\u6cd5\u5411\u91cf(Normal Vector)"},{"location":"OpenGL/%E5%85%89%E7%85%A7/#normal-matrix","text":"\u5f53\u5e94\u7528\u4e00\u4e2a\u4e0d\u7b49\u6bd4\u7f29\u653e\u65f6\uff0c\u6cd5\u5411\u91cf\u5c31\u4e0d\u4f1a\u518d\u5782\u76f4\u4e8e\u5bf9\u5e94\u7684\u8868\u9762\uff0c\u8fd9\u6837\u5149\u7167\u5c31\u4f1a\u88ab\u7834\u574f\u3002\u4fee\u590d\u8fd9\u4e2a\u884c\u4e3a\u7684\u8bc0\u7a8d\u662f\u4f7f\u7528\u4e00\u4e2a\u4e3a\u6cd5\u5411\u91cf\u4e13\u95e8\u5b9a\u5236\u7684\u6a21\u578b\u77e9\u9635\u3002\u8fd9\u4e2a\u77e9\u9635\u79f0\u4e4b\u4e3a \u6cd5\u7ebf\u77e9\u9635(Normal Matrix) \u3002\u5b83\u4f7f\u7528\u4e86\u4e00\u4e9b\u7ebf\u6027\u4ee3\u6570\u7684\u64cd\u4f5c\u6765\u79fb\u9664\u5bf9\u6cd5\u5411\u91cf\u9519\u8bef\u7f29\u653e\u7684\u5f71\u54cd\u3002 \u6cd5\u7ebf\u77e9\u9635\u88ab\u5b9a\u4e49\u4e3a\u300c\u6a21\u578b\u77e9\u9635\u7684\u9006\u77e9\u9635\u7684\u8f6c\u7f6e\u77e9\u9635\u300d Back Attention \u5373\u4f7f\u662f\u5bf9\u4e8e\u7740\u8272\u5668\u6765\u8bf4\uff0c\u9006\u77e9\u9635\u4e5f\u662f\u4e00\u4e2a\u5f00\u9500\u6bd4\u8f83\u5927\u7684\u8fd0\u7b97\uff0c\u56e0\u6b64\uff0c\u5e94\u8be5\u907f\u514d\u5728\u7740\u8272\u5668\u4e2d\u8fdb\u884c\u9006\u77e9\u9635\u8fd0\u7b97\uff0c\u5728\u7ed8\u5236\u4e4b\u524d\u6700\u597d\u7528CPU\u8ba1\u7b97\u51fa\u6cd5\u7ebf\u77e9\u9635\uff0c\u7136\u540e\u901a\u8fc7uniform\u628a\u503c\u4f20\u9012\u7ed9\u7740\u8272\u5668\u3002","title":"\u6cd5\u7ebf\u77e9\u9635(Normal Matrix)"},{"location":"OpenGL/%E5%85%89%E7%85%A7/#specular-lighting","text":"\u548c\u6f2b\u53cd\u5c04\u5149\u7167\u4e00\u6837\uff0c\u955c\u9762\u5149\u7167\u4e5f\u662f\u5149\u7684\u65b9\u5411\u5411\u91cf\u548c\u7269\u4f53\u7684\u6cd5\u5411\u91cf\u6765\u51b3\u5b9a\u7684\u3002\u955c\u9762\u5149\u7167\u662f\u57fa\u4e8e\u5149\u7684\u53cd\u5c04\u7279\u6027\uff08\u53cd\u5c04\u89d2\u7b49\u4e8e\u5165\u5c04\u89d2\uff09\u3002 \u4f46\u662f\u5b83\u4e5f\u4f9d\u8d56\u4e8e\u89c2\u5bdf\u65b9\u5411\uff0c\u53cd\u5c04\u5411\u91cf\u548c\u89c6\u7ebf\u65b9\u5411\u7684\u5939\u89d2\u8d8a\u5c0f\uff0c\u955c\u9762\u5149\u7684\u5f71\u54cd\u5c31\u4f1a\u8d8a\u5927\uff08\u5f62\u6210\u9ad8\u5149\uff09\u3002 Back float specularStrength = 0.5; vec3 viewDir = normalize(viewPos - FragPos); vec3 reflectDir = reflect(-lightDir, norm); //32\u6b21\u5e42\u3002\u8fd9\u4e2a32\u662f\u9ad8\u5149\u7684\u53cd\u5149\u5ea6(Shininess)\u3002 //\u4e00\u4e2a\u7269\u4f53\u7684\u53cd\u5149\u5ea6\u8d8a\u9ad8\uff0c\u53cd\u5c04\u5149\u7684\u80fd\u529b\u8d8a\u5f3a\uff0c\u6563\u5c04\u5f97\u8d8a\u5c11\uff0c\u9ad8\u5149\u70b9\u5c31\u4f1a\u8d8a\u5c0f\u3002 float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); vec3 specular = specularStrength * spec * lightColor; vec3 result = (ambient + diffuse + specular) * objectColor; FragColor = vec4(result, 1.0); \u4e0d\u540c \u53cd\u5149\u5ea6 \u7684\u89c6\u89c9\u6548\u679c\u5f71\u54cd","title":"\u955c\u9762\u5149\u7167(Specular Lighting)"},{"location":"OpenGL/%E5%85%89%E7%85%A7/#demo","text":"//fragment shader #version 330 core out vec4 FragColor; in vec3 Normal; in vec3 FragPos; uniform vec3 lightPos; uniform vec3 viewPos; uniform vec3 lightColor; uniform vec3 objectColor; void main() { // ambient float ambientStrength = 0.1; vec3 ambient = ambientStrength * lightColor; // diffuse vec3 norm = normalize(Normal); vec3 lightDir = normalize(lightPos - FragPos); float diff = max(dot(norm, lightDir), 0.0); vec3 diffuse = diff * lightColor; // specular float specularStrength = 0.5; vec3 viewDir = normalize(viewPos - FragPos); vec3 reflectDir = reflect(-lightDir, norm); float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); vec3 specular = specularStrength * spec * lightColor; vec3 result = (ambient + diffuse + specular) * objectColor; FragColor = vec4(result, 1.0); }","title":"Demo"},{"location":"OpenGL/%E6%9D%90%E8%B4%A8/","text":"\u6750\u8d28 # https://learnopengl-cn.github.io/02%20Lighting/03%20Materials/ Name Ambient Diffuse Specular Shininess emerald 0.0215 0.1745 0.0215 0.07568 jade 0.135 0.2225 0.1575 0.54 obsidian 0.05375 0.05 0.06625 0.18275 pearl 0.25 0.20725 0.20725 1 ruby 0.1745 0.01175 0.01175 0.61424 turquoise 0.1 0.18725 0.1745 0.396 brass 0.329412 0.223529 0.027451 0.780392 bronze 0.2125 0.1275 0.054 0.714 chrome 0.25 0.25 0.25 0.4 copper 0.19125 0.0735 0.0225 0.7038 gold 0.24725 0.1995 0.0745 0.75164 silver 0.19225 0.19225 0.19225 0.50754 black plastic 0.0 0.0 0.0 0.01 cyan plastic 0.0 0.1 0.06 0.0 green plastic 0.0 0.0 0.0 0.1 red plastic 0.0 0.0 0.0 0.5 white plastic 0.0 0.0 0.0 0.55 yellow plastic 0.0 0.0 0.0 0.5 black rubber 0.02 0.02 0.02 0.01 cyan rubber 0.0 0.05 0.05 0.4 green rubber 0.0 0.05 0.0 0.4 red rubber 0.05 0.0 0.0 0.5 white rubber 0.05 0.05 0.05 0.5 yellow rubber 0.05 0.05 0.0 0.5","title":"\u6750\u8d28"},{"location":"OpenGL/%E6%9D%90%E8%B4%A8/#_1","text":"https://learnopengl-cn.github.io/02%20Lighting/03%20Materials/ Name Ambient Diffuse Specular Shininess emerald 0.0215 0.1745 0.0215 0.07568 jade 0.135 0.2225 0.1575 0.54 obsidian 0.05375 0.05 0.06625 0.18275 pearl 0.25 0.20725 0.20725 1 ruby 0.1745 0.01175 0.01175 0.61424 turquoise 0.1 0.18725 0.1745 0.396 brass 0.329412 0.223529 0.027451 0.780392 bronze 0.2125 0.1275 0.054 0.714 chrome 0.25 0.25 0.25 0.4 copper 0.19125 0.0735 0.0225 0.7038 gold 0.24725 0.1995 0.0745 0.75164 silver 0.19225 0.19225 0.19225 0.50754 black plastic 0.0 0.0 0.0 0.01 cyan plastic 0.0 0.1 0.06 0.0 green plastic 0.0 0.0 0.0 0.1 red plastic 0.0 0.0 0.0 0.5 white plastic 0.0 0.0 0.0 0.55 yellow plastic 0.0 0.0 0.0 0.5 black rubber 0.02 0.02 0.02 0.01 cyan rubber 0.0 0.05 0.05 0.4 green rubber 0.0 0.05 0.0 0.4 red rubber 0.05 0.0 0.0 0.5 white rubber 0.05 0.05 0.05 0.5 yellow rubber 0.05 0.05 0.0 0.5","title":"\u6750\u8d28"},{"location":"UE4/test/","text":"Welcome to UE4 # UE4 # UE4 1 UE4 2 UE4 3 UE4 4","title":"test"},{"location":"UE4/test/#welcome-to-ue4","text":"","title":"Welcome to UE4"},{"location":"UE4/test/#ue4","text":"UE4 1 UE4 2 UE4 3 UE4 4","title":"UE4"}]}